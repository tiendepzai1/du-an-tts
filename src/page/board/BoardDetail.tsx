import { useNavigate, useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import axios from "axios";
import { useForm } from "react-hook-form";
import { Pencil, Trash2 } from "lucide-react";

type Card = {
  _id: string;
  cardName: string;
  description: string;
  dueDate?: string;
  status?: boolean;
};

type List = {
  _id: string;
  listName: string;
  description: string;
  status: "vi·ªác c·∫ßn l√†m" | "ƒëang th·ª±c hi·ªán" | "ƒë√£ xong";
  ownerCard?: Card[];
};

type Board = {
  _id: string;
  broadName: string;
  description: string;
  ownerList: List[];
};

type ListFormInputs = {
  listName: string;
  description: string;
  status: "vi·ªác c·∫ßn l√†m" | "ƒëang th·ª±c hi·ªán" | "ƒë√£ xong";
};

type CardFormInputs = {
  cardName: string;
  description?: string;
  dueDate?: string;
  status?: boolean;
};

export default function BoardDetail() {
  const { id } = useParams<{ id: string }>();
  const [board, setBoard] = useState<Board | null>(null);
  const [loading, setLoading] = useState(true);
  const [editingList, setEditingList] = useState<List | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [addingCardListsId, setAddingCardListId] = useState<string | null>(null);
  const [editingCard, setEditingCard] = useState<Card | null>(null); // ‚úÖ card ƒëang s·ª≠a
  const [editingCardListId, setEditingCardListId] = useState<string | null>(null); // ‚úÖ list ch·ª©a card ƒë√≥



  const nav = useNavigate();

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<ListFormInputs>();

  const {
    register: registerCard,
    handleSubmit: handleSubmitCard,
    reset: resetCardForm,
    formState: { errors: cardErrors },
  } = useForm<CardFormInputs>();

  // üîπ L·∫•y d·ªØ li·ªáu board
  const fetchBoard = async () => {
    if (!id) return;
    try {
      setLoading(true);
      const boardRes = await axios.get(`http://localhost:3000/broad/detail/${id}`);
      const listRes = await axios.get(`http://localhost:3000/list/broad/${id}`);
      // console.log("D·ªØ li·ªáu t·ª´ listRes:", listRes.data);
      // console.log("üì¶ List chi ti·∫øt:", JSON.stringify(listRes.data.data, null, 2));

      setBoard({
        _id: id,
        broadName: boardRes.data.data?.broadName || "T√™n Board",
        description: boardRes.data.data?.description || "Ch∆∞a c√≥ m√¥ t·∫£",
        ownerList: listRes.data.data || [],
      });
    } catch (err) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchBoard();
  }, [id]);

  // üîπ Th√™m/S·ª≠a List
  const onSubmit = async (data: ListFormInputs) => {
    try {
      if (!id) return;

      if (editingList) {
        await axios.put(`http://localhost:3000/list/update/${editingList._id}`, {
          ...data,
          ownerBroad: id,
        });
      } else {
        await axios.post(`http://localhost:3000/list/create`, {
          ...data,
          ownerBroad: id,
        });
      }

      reset();
      setEditingList(null);
      setShowForm(false);
      fetchBoard();
    } catch (err: any) {
      console.error("L·ªói khi th√™m/s·ª≠a list:", err);
      alert(err.response?.data?.message || "L·ªói khi th√™m/s·ª≠a list");
    }
  };

  // üîπ X√≥a List
  const handleDelete = async (listId: string) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a list n√†y?")) return;
    try {
      await axios.delete(`http://localhost:3000/list/delete/${listId}`);
      fetchBoard();
    } catch (err) {
      console.error("L·ªói khi x√≥a list:", err);
      alert("X√≥a list th·∫•t b·∫°i");
    }
  };

  // üîπ S·ª≠a List
  const handleEdit = (list: List) => {
    setEditingList(list);
    reset(list);
    setShowForm(true);
  };

  // ================= CARD FUNCTIONS =================

  const onSubmitCard = async (data: CardFormInputs) => {
    try {
      if (editingCard) {
        // ‚úÖ S·ª≠a card
        await axios.put(`http://localhost:3000/card/update/${editingCard._id}`, {
          ...data,
          ownerList: [editingCardListId],
        });

        setEditingCard(null);
        setEditingCardListId(null);
      } else {
        // ‚úÖ Th√™m m·ªõi
        if (!addingCardListsId) return;

        const payload = {
          ...data,
          ownerLists: [addingCardListsId],
        };

        await axios.post("http://localhost:3000/card/create", payload);
        setAddingCardListId(null);
      }

      resetCardForm();
      fetchBoard();
    } catch (err: any) {
      console.error("L·ªói khi x·ª≠ l√Ω card:", err);
      alert(err.response?.data?.message || "L·ªói khi x·ª≠ l√Ω card");
    }
  };


  const handleEditCard = (listId: string, card: Card) => {
    setEditingCard(card);
    setEditingCardListId(listId);
    setAddingCardListId(null); // ‚úÖ T·∫Øt form th√™m n·∫øu ƒëang m·ªü
    resetCardForm(card); // ƒê·ªï d·ªØ li·ªáu c≈© v√†o form
  };


  const handleDeleteCard = async (cardId: string) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th·∫ª n√†y?")) return;
    try {
      await axios.delete(`http://localhost:3000/card/delete/${cardId}`);
      fetchBoard();
    } catch (err) {
      console.error("L·ªói khi x√≥a card:", err);
      alert("X√≥a card th·∫•t b·∫°i");
    }
  };

  // ================= RENDER =================

  if (loading) return <p className="p-6">ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!board) return <p className="p-6 text-red-500">Kh√¥ng t√¨m th·∫•y board!</p>;

  return (
    <div className="p-6">
      <button
        onClick={() => nav("/Layout")}
        className="bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded-xl mb-4"
      >
        Trang Ch·ªß
      </button>

      <div className="mb-6">
        <h1 className="text-3xl font-bold text-black-700">{board.broadName}</h1>
        <p className="text-gray-600 mt-2">{board.description}</p>
      </div>

      {!showForm && !editingList && (
        <button
          onClick={() => setShowForm(true)}
          className="bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded-xl mb-4"
        >
          ‚ûï Th√™m danh s√°ch
        </button>
      )}

      {(showForm || editingList) && (
        <div className="bg-white p-4 rounded-2xl shadow-sm border border-gray-200 mb-6 w-[320px]">
          <h2 className="text-lg font-semibold text-gray-700 mb-2">
            {editingList ? "‚úèÔ∏è S·ª≠a danh s√°ch" : "‚ûï Th√™m danh s√°ch"}
          </h2>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-3">
            <input
              {...register("listName", { required: "T√™n list l√† b·∫Øt bu·ªôc" })}
              placeholder="T√™n danh s√°ch..."
              className="w-full border border-gray-300 rounded-xl px-3 py-2 text-sm focus:ring-2 focus:ring-blue-400"
            />
            {errors.listName && <p className="text-red-500 text-xs">{errors.listName.message}</p>}

            <textarea
              {...register("description")}
              placeholder="M√¥ t·∫£..."
              className="w-full border border-gray-300 rounded-xl px-3 py-2 text-sm focus:ring-2 focus:ring-blue-400"
            />

            <select
              {...register("status")}
              className="w-full border border-gray-300 rounded-xl px-3 py-2 text-sm focus:ring-2 focus:ring-blue-400"
            >
              <option value="vi·ªác c·∫ßn l√†m">Vi·ªác c·∫ßn l√†m</option>
              <option value="ƒëang th·ª±c hi·ªán">ƒêang th·ª±c hi·ªán</option>
              <option value="ƒë√£ xong">ƒê√£ xong</option>
            </select>

            <div className="flex gap-2">
              <button
                type="submit"
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 rounded-xl"
              >
                {editingList ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
              </button>
              <button
                type="button"
                onClick={() => {
                  reset();
                  setEditingList(null);
                  setShowForm(false);
                }}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 text-sm font-medium py-2 rounded-xl"
              >
                H·ªßy
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Hi·ªÉn th·ªã danh s√°ch List v√† Card */}
      <div className="flex gap-4 overflow-x-auto pb-4">
        {board.ownerList.length > 0 ? (
          board.ownerList.map((list) => (
            <div
              key={list._id}
              className={`min-w-[260px] rounded-xl shadow p-4 border border-gray-200 ${list.status === "ƒë√£ xong"
                ? "bg-green-100"
                : list.status === "ƒëang th·ª±c hi·ªán"
                  ? "bg-yellow-100"
                  : "bg-blue-100"
                }`}
            >
              <div className="flex justify-between items-center mb-2">
                <h3 className="font-bold text-blue-800">{list.listName}</h3>
                <div className="flex gap-2">
                  <button onClick={() => handleEdit(list)} className="text-blue-500 hover:text-blue-700">
                    <Pencil size={16} />
                  </button>
                  <button onClick={() => handleDelete(list._id)} className="text-red-500 hover:text-red-700">
                    <Trash2 size={16} />
                  </button>
                </div>
              </div>

              <p className="text-sm text-gray-700 mb-2">{list.description}</p>
              <span className="inline-block px-2 py-1 text-xs rounded-lg bg-white/60 font-medium text-gray-700">
                {list.status}
              </span>

              {/* Danh s√°ch Card */}
              <div className="bg-white/60 p-2 rounded-lg mt-2">
                <h4 className="text-sm font-semibold mb-2"> Th·∫ª c√¥ng vi·ªác</h4>

                {list.ownerCard && list.ownerCard.length > 0 ? (
                  list.ownerCard.map((card) => (
                    <div key={card._id} className="bg-white border border-gray-300 rounded-lg p-2 mb-2 shadow-sm">
                      {/* D√≤ng tr√™n: cardName b√™n tr√°i, n√∫t ch·ªânh s·ª≠a x√≥a b√™n ph·∫£i */}
                      <div className="flex justify-between items-center">
                        <span className="font-medium text-gray-800">{card.cardName}</span>

                        <div className="flex gap-2">
                          <button
                            onClick={() => handleEditCard(list._id, card)}
                            className="text-blue-500 hover:text-blue-700"
                          >
                            <Pencil size={14} />
                          </button>
                          <button
                            onClick={() => handleDeleteCard(card._id)}
                            className="text-red-500 hover:text-red-700"
                          >
                            <Trash2 size={14} />
                          </button>
                        </div>
                      </div>

                      {/* D√≤ng d∆∞·ªõi: description */}
                      <p className="text-gray-600 text-sm mt-1">{card.description || "Kh√¥ng c√≥ m√¥ t·∫£"}</p>

                      {/* Hi·ªÉn th·ªã h·∫°n n·ªôp n·∫øu c√≥ */}
                      {card.dueDate && (
                        <p className="text-xs text-red-500 mt-1">
                          H·∫°n n·ªôp: {new Date(card.dueDate).toLocaleDateString('vi-VN')}
                        </p>
                      )}
                    </div>
                  ))
                ) : (
                  <p className="text-xs text-gray-500">Ch∆∞a c√≥ th·∫ª n√†o.</p>
                )}



                {/* Form th√™m card */}
                {/* Form th√™m/s·ª≠a card */}
                {/* FORM S·ª¨A TH·∫∫ */}
                {editingCard && editingCardListId === list._id && (
                  <form onSubmit={handleSubmitCard(onSubmitCard)} className="bg-white p-2 rounded-lg mt-2 border">
                    <h4 className="text-sm font-semibold mb-2">‚úèÔ∏è S·ª≠a th·∫ª</h4>

                    {/* C√°c input gi·ªØ nguy√™n */}
                    <input
                      {...registerCard("cardName", { required: "T√™n th·∫ª l√† b·∫Øt bu·ªôc" })}
                      placeholder="T√™n th·∫ª..."
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2 focus:ring-2 focus:ring-blue-400"
                    />
                    {cardErrors.cardName && (
                      <p className="text-xs text-red-500">{cardErrors.cardName.message}</p>
                    )}

                    <textarea
                      {...registerCard("description")}
                      placeholder="M√¥ t·∫£..."
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2 focus:ring-2 focus:ring-blue-400"
                    />

                    <label className="text-xs text-gray-600">H·∫°n n·ªôp:</label>
                    <input
                      type="date"
                      {...registerCard("dueDate")}
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2"
                    />

                    <div className="flex items-center gap-2 mb-2">
                      <input
                        type="checkbox"
                        {...registerCard("status")}
                        id={`status-${list._id}`}
                      />
                      <label htmlFor={`status-${list._id}`} className="text-xs text-gray-600">Ho√†n th√†nh</label>
                    </div>

                    <div className="flex gap-2">
                      <button
                        type="submit"
                        className="flex-1 bg-blue-500 hover:bg-blue-600 text-white text-xs font-medium py-1 rounded-lg"
                      >
                        C·∫≠p nh·∫≠t
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          resetCardForm();
                          setEditingCard(null);
                          setEditingCardListId(null);
                        }}
                        className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 text-xs font-medium py-1 rounded-lg"
                      >
                        H·ªßy
                      </button>
                    </div>
                  </form>
                )}

                {/* FORM TH√äM TH·∫∫ */}
                {!editingCard && addingCardListsId === list._id && (
                  <form onSubmit={handleSubmitCard(onSubmitCard)} className="bg-white p-2 rounded-lg mt-2 border">
                    <h4 className="text-sm font-semibold mb-2">‚ûï Th√™m th·∫ª</h4>

                    {/* C√°c input gi·ªëng nhau n√™n c√≥ th·ªÉ extract ra component sau */}
                    <input
                      {...registerCard("cardName", { required: "T√™n th·∫ª l√† b·∫Øt bu·ªôc" })}
                      placeholder="T√™n th·∫ª..."
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2 focus:ring-2 focus:ring-blue-400"
                    />
                    {cardErrors.cardName && (
                      <p className="text-xs text-red-500">{cardErrors.cardName.message}</p>
                    )}

                    <textarea
                      {...registerCard("description")}
                      placeholder="M√¥ t·∫£..."
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2 focus:ring-2 focus:ring-blue-400"
                    />

                    <label className="text-xs text-gray-600">H·∫°n n·ªôp:</label>
                    <input
                      type="date"
                      {...registerCard("dueDate")}
                      className="w-full border border-gray-300 rounded-lg px-2 py-1 text-sm mb-2"
                    />

                    <div className="flex items-center gap-2 mb-2">
                      <input
                        type="checkbox"
                        {...registerCard("status")}
                        id={`status-${list._id}`}
                      />
                      <label htmlFor={`status-${list._id}`} className="text-xs text-gray-600">Ho√†n th√†nh</label>
                    </div>

                    <div className="flex gap-2">
                      <button
                        type="submit"
                        className="flex-1 bg-blue-500 hover:bg-blue-600 text-white text-xs font-medium py-1 rounded-lg"
                      >
                        Th√™m
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          resetCardForm();
                          setAddingCardListId(null);
                        }}
                        className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 text-xs font-medium py-1 rounded-lg"
                      >
                        H·ªßy
                      </button>
                    </div>
                  </form>
                )}



                {/* N·∫øu kh√¥ng ƒëang s·ª≠a v√† list n√†y ch∆∞a m·ªü form th√™m card th√¨ hi·ªán n√∫t Th√™m th·∫ª */}
                {!editingCard && addingCardListsId !== list._id && editingCardListId !== list._id && (
                  <button
                    onClick={() => {
                      setAddingCardListId(list._id);
                      setEditingCard(null);
                      setEditingCardListId(null);
                      resetCardForm({
                        cardName: "",
                        description: "",
                        dueDate: "",
                        status: false,
                      }); // ‚úÖ Reset r√µ r√†ng
                    }}
                    className="w-full text-xs bg-blue-500 hover:bg-blue-600 text-white rounded-lg py-1 mt-2"
                  >
                    ‚ûï Th√™m th·∫ª
                  </button>

                )}





              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-500">Ch∆∞a c√≥ danh s√°ch n√†o.</p>
        )}
      </div>
    </div>
  );
}
